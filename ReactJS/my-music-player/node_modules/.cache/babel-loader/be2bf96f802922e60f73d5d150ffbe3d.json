{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhijit\\\\Music\\\\my-music-player\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport songs from './songs';\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentSongIndex, setCurrentSongIndex] = useState(0); // currentSongIndex\n\n  const [nextSongIndex, setNextSongIndex] = useState(1); // nextSongIndex\n  // for efficient rendering, I am using useState hooks\n\n  useEffect(() => {\n    setNextSongIndex(() => (currentSongIndex + 1) % songs.length); // change nextSongIndex ðŸ‘‡\n\n    console.log(songs[currentSongIndex]);\n  }, [currentSongIndex]); // when currentSongIndex is changed ðŸ‘†\n  // function nextSongPlease() {\n  //   setCurrentSongIndex(() => (currentSongIndex+1)%(songs.length))      // change currentSongIndex when called\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Player, {\n      currentSongIndex: currentSongIndex,\n      setCurrentSongIndex: setCurrentSongIndex,\n      nextSongIndex: nextSongIndex,\n      songs: songs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eCuEezpozHBr5/wwQHMDenu08OY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","songs","Player","App","currentSongIndex","setCurrentSongIndex","nextSongIndex","setNextSongIndex","length","console","log"],"sources":["C:/Users/Abhijit/Music/my-music-player/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport songs from './songs';\nimport Player from './Player'\n\nfunction App() {\n  const [currentSongIndex, setCurrentSongIndex] = useState(0)           // currentSongIndex\n  const [nextSongIndex, setNextSongIndex] = useState(1)                 // nextSongIndex\n  // for efficient rendering, I am using useState hooks\n  \n  useEffect(() => {\n    setNextSongIndex(() => (currentSongIndex+1)%(songs.length))         // change nextSongIndex ðŸ‘‡\n    console.log(songs[currentSongIndex])                \n  }, [currentSongIndex]);                                               // when currentSongIndex is changed ðŸ‘†\n\n  // function nextSongPlease() {\n  //   setCurrentSongIndex(() => (currentSongIndex+1)%(songs.length))      // change currentSongIndex when called\n  // }\n\n  return (\n    <div className=\"App\">\n        <Player \n        currentSongIndex={currentSongIndex}\n        setCurrentSongIndex={setCurrentSongIndex}\n        nextSongIndex={nextSongIndex}\n        songs={songs}\n        />\n      {/* <div className='flexcontainer3'>3</div> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,CAAD,CAAxD,CADa,CACyD;;EACtE,MAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,CAAD,CAAlD,CAFa,CAEyD;EACtE;;EAEAD,SAAS,CAAC,MAAM;IACdQ,gBAAgB,CAAC,MAAM,CAACH,gBAAgB,GAAC,CAAlB,IAAsBH,KAAK,CAACO,MAAnC,CAAhB,CADc,CACsD;;IACpEC,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACG,gBAAD,CAAjB;EACD,CAHQ,EAGN,CAACA,gBAAD,CAHM,CAAT,CALa,CAQyD;EAEtE;EACA;EACA;;EAEA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACI,QAAC,MAAD;MACA,gBAAgB,EAAEA,gBADlB;MAEA,mBAAmB,EAAEC,mBAFrB;MAGA,aAAa,EAAEC,aAHf;MAIA,KAAK,EAAEL;IAJP;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;GAzBQE,G;;KAAAA,G;AA2BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}